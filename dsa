class Stack:
    def __init__(self):
        self.items = []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        if self.items:
            return self.items.pop()
        raise IndexError("Pop from empty stack")

    def peek(self):
        if self.items:
            return self.items[-1]
        raise IndexError("Peek from empty stack")


def precedence(op):
    if op in ('+', '-'):
        return 1
    if op in ('*', '/'):
        return 2
    return 0


def infix_to_postfix(expression):
    stack = Stack()
    postfix = []
    for char in expression:
        if char.isalnum():
            postfix.append(char)
        elif char == '(':
            stack.push(char)
        elif char == ')':
            while stack.items and stack.peek() != '(':
                postfix.append(stack.pop())
            stack.pop()  # Remove '('
        else:
            while (stack.items and precedence(stack.peek()) >= precedence(char)):
                postfix.append(stack.pop())
            stack.push(char)

    while stack.items:
        postfix.append(stack.pop())

    return ''.join(postfix)


def evaluate_postfix(expression):
    stack = Stack()
    for char in expression:
        if char.isdigit():
            stack.push(int(char))
        else:
            right = stack.pop()
            left = stack.pop()
            if char == '+':
                stack.push(left + right)
            elif char == '-':
                stack.push(left - right)
            elif char == '*':
                stack.push(left * right)
            elif char == '/':
                stack.push(left / right)
    
    return stack.pop()


# Example usage
infix_expr = "3+(2*5)"
postfix_expr = infix_to_postfix(infix_expr)
print("Postfix Expression:", postfix_expr)

postfix_expr_to_evaluate = "325*+"
result = evaluate_postfix(postfix_expr_to_evaluate)
print("Result of Postfix Evaluation:", result)
